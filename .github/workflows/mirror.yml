name: Supabase-Mirror

on:
  push:
    branches: main
  schedule:
    - cron: '0 1 * * *'
  workflow_dispatch:

env:
  ALIYUN_REGISTRY: "crpi-zw3p6lzef7gd5ljw.cn-hangzhou.personal.cr.aliyuncs.com"
  ALIYUN_NAME_SPACE: "pessdocker/supabase"
  ALIYUN_REGISTRY_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"
  ALIYUN_REGISTRY_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"

jobs:
  push-supabase-docker-mirror:
    name: get supabase docker file
    permissions:
      contents: write
    runs-on: ubuntu-24.04
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Clone supabase repository and prepare files
      run: |
        git clone --depth 1 https://github.com/supabase/supabase
        cd supabase/docker
        if [ -f .env.example ]; then
          cp .env.example .env
          echo ".env.example found and copied to .env"
          ls -la  # 列出目录内容以便调试
        fi

    - name: Push docker folder to mirror branch
      uses: crazy-max/ghaction-github-pages@v4
      with:
        target_branch: mirror
        build_dir: supabase/docker
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  extract-docker-images:
    name: extract docker image
    runs-on: ubuntu-24.04
    needs: push-supabase-docker-mirror
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: mirror

      # 安装 yq 工具
      - name: Install yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq

      # 提取 image
      - name: Extract images
        run: |
          yq e '.services.*.image' docker-compose.yml > image.txt

      # 验证输出
      - name: Display extracted images
        run: cat image.txt

      - name: Process docker-compose.yml and update image names
        run: |
          # 创建一个空的临时文件
          output_file="docker-compose-mirror.yml"
          echo "" > "$output_file"  # 清空输出文件，确保每次生成新的文件
          # 读取 docker-compose.yml 文件并逐行处理
          while IFS= read -r line; do
            # 如果该行包含 image: 字段
            if [[ "$line" =~ image:\ (.*) ]]; then
              image="${BASH_REMATCH[1]}"
              
              # 获取镜像的名字和标签部分
              image_name=$(echo $image | cut -d':' -f1)
              image_tag=$(echo $image | cut -d':' -f2)
              # 检查镜像名是否包含 "/"
             
              # 获取当前行的前导空格（缩进）
              indent=$(echo "$line" | sed -E 's/^([[:space:]]*).*$/\1/')
              # 输出新的镜像名称，并保持正确的缩进
              new_image="${ALIYUN_REGISTRY}/${ALIYUN_NAME_SPACE}/${image_name_tag}"
              echo "${indent}image: $new_image" >> "$output_file"
            else
              # 如果该行不包含 image: 字段，直接写入输出文件
              echo "$line" >> "$output_file"
            fi
          done < docker-compose.yml  # 从原文件读取
      
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      # 提交并推送 image.txt 文件
      - name: Commit and Push
        run: |
          git add image.txt docker-compose-mirror.yml
          git commit -m "mirror"
          git push origin mirror
  
  
  push-to-aliyun:
    name: push updated images to aliyun
    runs-on: ubuntu-24.04
    needs: extract-docker-images
    env:
      ALIYUN_REGISTRY: "crpi-zw3p6lzef7gd5ljw.cn-hangzhou.personal.cr.aliyuncs.com"
      ALIYUN_NAME_SPACE: "pessdocker/supabase"
    steps:
    - name: Before freeing up disk space
      run: |
        echo "Before freeing up disk space"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="
    # 增加可用磁盘空间
    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 2048
        swap-size-mb: 128
        remove-dotnet: 'true'
        remove-haskell: 'true'
        build-mount-path: '/var/lib/docker/'

    - name: Restart docker
      run: sudo service docker restart

    - name: Free up disk space complete
      run: |
        echo "Free up disk space complete"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        ref: mirror

    - name: Docker Setup Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push image Aliyun
      run: |
        docker login -u $ALIYUN_REGISTRY_USER -p $ALIYUN_REGISTRY_PASSWORD $ALIYUN_REGISTRY
        # 数据预处理,判断镜像是否重名
        declare -A duplicate_images
        declare -A temp_map
        while IFS= read -r line || [ -n "$line" ]; do
            # 忽略空行与注释
            [[ -z "$line" ]] && continue
            if echo "$line" | grep -q '^\s*#'; then
                continue
            fi
            
            # 获取镜像的完整名称，例如kasmweb/nginx:1.25.3（命名空间/镜像名:版本号）
            image=$(echo "$line" | awk '{print $NF}')
            # 将@sha256:等字符删除
            image="${image%%@*}"
            echo "image $image"
            # 获取镜像名:版本号  例如nginx:1.25.3
            image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}')
            echo "image_name_tag $image_name_tag"
            # 获取命名空间 例如kasmweb  这里有种特殊情况 docker.io/nginx，把docker.io当成命名空间，也OK
            name_space=$(echo "$image" | awk -F'/' '{if (NF==3) print $2; else if (NF==2) print $1; else print ""}')
            echo "name_space: $name_space"
            # 这里不要是空值影响判断
            name_space="${name_space}_"
            # 获取镜像名例如nginx
            image_name=$(echo "$image_name_tag" | awk -F':' '{print $1}')
            echo "image_name: $image_name"
            
            # 如果镜像存在于数组中，则添加temp_map
            if [[ -n "${temp_map[$image_name]}" ]]; then
                 # 如果temp_map已经存在镜像名，判断是不是同一命名空间
                 if [[ "${temp_map[$image_name]}" != $name_space  ]]; then
                    echo "duplicate image name: $image_name"
                    duplicate_images[$image_name]="true"
                 fi
            else
                # 存镜像的命名空间
                temp_map[$image_name]=$name_space
            fi       
        done < image.txt
        
        
        while IFS= read -r line || [ -n "$line" ]; do
            # 忽略空行与注释
            [[ -z "$line" ]] && continue
            if echo "$line" | grep -q '^\s*#'; then
                continue
            fi
        
            echo "docker pull $line"
            docker pull $line
            platform=$(echo "$line" | awk -F'--platform[ =]' '{if (NF>1) print $2}' | awk '{print $1}')
            echo "platform is $platform"
            # 如果存在架构信息 将架构信息拼到镜像名称前面
            if [ -z "$platform" ]; then
                platform_prefix=""
            else
                platform_prefix="${platform//\//_}_"
            fi
            echo "platform_prefix is $platform_prefix"
            # 获取镜像的完整名称，例如kasmweb/nginx:1.25.3（命名空间/镜像名:版本号）
            image=$(echo "$line" | awk '{print $NF}')
            # 获取 镜像名:版本号  例如nginx:1.25.3
            image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}')
            # 获取命名空间 例如kasmweb  这里有种特殊情况 docker.io/nginx，把docker.io当成命名空间，也OK
            name_space=$(echo "$image" | awk -F'/' '{if (NF==3) print $2; else if (NF==2) print $1; else print ""}')
            # 获取镜像名例  例如nginx
            image_name=$(echo "$image_name_tag" | awk -F':' '{print $1}')
         
            name_space_prefix=""
            # 如果镜像名重名
            if [[ -n "${duplicate_images[$image_name]}" ]]; then
               #如果命名空间非空，将命名空间加到前缀
               if [[ -n "${name_space}" ]]; then
                  name_space_prefix="${name_space}_"
               fi
            fi
             # 将@sha256:等字符删除
            #image_name_tag="${image_name_tag%%@*}"
            new_image="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/$platform_prefix$name_space_prefix$image_name_tag"
            echo "docker tag $image $new_image"
            docker tag $image $new_image
            echo "docker push $new_image"
            docker push $new_image
            echo "开始清理磁盘空间"
            echo "=============================================================================="
            df -hT
            echo "=============================================================================="
            docker rmi $image
            docker rmi $new_image
            echo "磁盘空间清理完毕"
            echo "=============================================================================="
            df -hT
            echo "=============================================================================="     
            
        done < image.txt
